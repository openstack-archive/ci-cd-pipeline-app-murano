Namespaces:
  =: org.openstack.cicd
  std: io.murano
  res: io.murano.resources
  sys: io.murano.system
  cicd: org.openstack.cicd
  puppet: org.openstack.cicd.puppet

Name: CiCdEnvironment

Extends: std:Application

Properties:
  ldap:
    Contract: $.class(cicd:OpenLDAP)
    Usage: Out
  gerrit:
    Contract: $.class(cicd:Gerrit)
    Usage: Out
  jenkins:
    Contract: $.class(cicd:Jenkins)
    Usage: Out

  ldapRootUser:
    Contract: $.string().notNull()
  ldapRootPass:
    Contract: $.string().notNull()
  ldapRootEmail:
    Contract: $.string().notNull()
  ldapUser:
    Contract: $.string()
  ldapPass:
    Contract: $.string()
  ldapEmail:
    Contract: $.string()

  instance_name:
    Contract: $.string().notNull()
  flavor:
    Contract: $.string().notNull()
  image:
    Contract: $.string().notNull()
  keyname:
    Contract: $.string().notNull()
  availabilityZone:
    Contract: $.string().notNull()
    Default: nova
  assignFloatingIp:
    Contract: $.bool().notNull()
    Default: true

Methods:
  .init:
    Body:
      - $._environment: $.find(std:Environment).require()

  deploy:
    Body:
      - $._environment.reporter.report($this, 'Deploying CI/CD')

      # OpenLDAP
      - If: $this.ldap = null
        Then:
          - $ldapInstanceName: concat($.instance_name, '-ldap')
          - $ldapInstance: new(puppet:PuppetInstance, $._environment,
              name => $ldapInstanceName,
              flavor => $.flavor,
              image => $.image,
              keyname => $.keyname,
              availabilityZone => $.availabilityZone,
              assignFloatingIp => $.assignFloatingIp)
          - $this.ldap: new(cicd:OpenLDAP, $._environment,
              name => 'OpenLDAP',
              instance => $ldapInstance,
              domain => 'infra.local',
              ldapRootUser => $.ldapRootUser,
              ldapRootPass => $.ldapRootPass,
              ldapRootEmail => $.ldapRootEmail,
              ldapUser => $.ldapUser,
              ldapPass => $.ldapPass,
              ldapEmail => $.ldapEmail)

      # Gerrit
      - If: $this.gerrit = null
        Then:
          - $gerritInstanceName: concat($.instance_name, '-gerrit')
          - $gerritInstance: new(puppet:PuppetInstance, $._environment,
              name => $gerritInstanceName,
              flavor => $.flavor,
              image => $.image,
              keyname => $.keyname,
              availabilityZone => $.availabilityZone,
              assignFloatingIp => $.assignFloatingIp)
          - $this.gerrit: new(cicd:Gerrit, $this,
              name => 'Gerrit',
              instance => $gerritInstance,
              ldap => $this.ldap)

      # Jenkins
      # set user and mail for accessing to Gerrit from Jenkins
      - If: $this.jenkins = null
        Then:
          - $._environment.reporter.report($this,
              'Jenkins credentials user={0}, password={1}'.format(
                $.ldapUser, $.ldapPass))
          - $jenkinsInstanceName: concat($.instance_name, '-jenkins')
          - $jenkinsInstance: new(puppet:PuppetInstance, $._environment,
              name => $jenkinsInstanceName,
              flavor => $.flavor,
              image => $.image,
              keyname => $.keyname,
              availabilityZone => $.availabilityZone,
              assignFloatingIp => $.assignFloatingIp)
          - $this.jenkins: new(cicd:Jenkins, $._environment,
              name => 'Jenkins',
              instance => $jenkinsInstance,
              ldap => $this.ldap,
              gerrit => $this.gerrit,
              cfplugin => false,
              gitUser => $.ldapUser,
              gitEmail => $.ldapEmail)

      # Deploy all
      - Parallel:
        - $this.ldap.deploy()
        - $this.gerrit.deploy()
        - $this.jenkins.deploy()
