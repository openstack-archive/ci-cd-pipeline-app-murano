Namespaces:
  =: org.openstack.ci_cd_pipeline_murano_app
  std: io.murano
  sys: io.murano.system
  puppet: org.openstack.ci_cd_pipeline_murano_app.puppet


Name: OpenLDAP

Extends: std:Application

Properties:
  instance:
    Contract: $.class(puppet:PuppetInstance).notNull()
  name:
    Contract: $.string().notNull()
  domain:
    Contract: $.string().notNull()
  ldapRootUser:
    Contract: $.string().notNull()
  ldapRootPass:
    Contract: $.string().notNull()
  ldapRootEmail:
    Contract: $.string().notNull()
  ldapUser:
    Contract: $.string()
  ldapPass:
    Contract: $.string()
  ldapEmail:
    Contract: $.string()

Methods:
  .init:
    Body:
      - $._environment: $.find(std:Environment).require()

  deploy:
    Body:
      - If: not $.getAttr(deployed, false)
        Then:
          - $securityGroupIngress:
              - ToPort: 389
                FromPort: 389
                IpProtocol: tcp
                External: true
              - ToPort: 636
                FromPort: 636
                IpProtocol: tcp
                External: true
          - $._environment.securityGroupManager.addGroupIngress($securityGroupIngress)
          - $._environment.reporter.report($this, 'Creating VM for OpenLDAP "{0}"'.format($.instance.name))
          - $.instance.deploy()
          - $._environment.reporter.report($this, 'OpenLDAP VM "{0}" with id {1} created'.format($.instance.name, $.instance.openstackId))

          - $.instance.installPuppetModule('datacentred-ldap')

          - $.createConfiguration()

          - $resources: new(sys:Resources)
          - $template: $resources.yaml('DeployOpenLDAP.template')
          - $._environment.reporter.report($this, 'OpenLDAP deploying')
          - $.instance.agent.call($template, $resources)
          - $._environment.reporter.report($this, format('OpenLDAP is available at {0}', $.instance.floatingIpAddress))

          - $._environment.reporter.report($this, format('Configuring root LDAP user'))
          - $.configureOpenLDAPRootUser()

          - If: $.ldapUser != '' and $.ldapUser != null
            Then:
              - $._environment.reporter.report($this, format('Configuring base non-admin LDAP user'))
              - $.configureOpenLDAPUser($.ldapUser, $.ldapPass, $.ldapEmail)

          - $.setAttr(deployed, true)
          - $._environment.reporter.report($this, 'OpenLDAP is deployed!')

  createConfiguration:
    Body:
      - $.instance.setHieraValue('ldap_domain', $.domain)
      - $.instance.setHieraValue('ldap_dc', $.domain.split('.')[0])
      - $.instance.setHieraValue('ldap_root_user', $.ldapRootUser)
      - $.instance.setHieraValue('ldap_root_password', $.ldapRootPass)
      - $.instance.setHieraValue('ldap_user', $.ldapUser)
      - $.instance.setHieraValue('ldap_password', $.ldapPass)

      - !yaql "$.instance.setHieraValue('ldap::client::uri', 'localhost')"
      - !yaql "$.instance.setHieraValue('ldap::server::rootpw', $.ldapRootPass)"
      - !yaql "$.instance.setHieraValue('ldap::client::ssl_cert', '')"

      #
      # these values are also supported by puppet module
      #
      #- !yaql "$.instance.setHieraValue('ldap::client::base', 'dc=example,dc=com')"
      #- !yaql "$.instance.setHieraValue('ldap::client::ssl', 'false')"
      #- !yaql "$.instance.setHieraValue('ldap::server::suffix', 'dc=example,dc=com')"
      #- !yaql "$.instance.setHieraValue('ldap::server::rootdn', format('cn={0},dc=example,dc=com', $.ldapRootUser))"
      #- !yaql "$.instance.setHieraValue('ldap::server::ssl', false)"
      #- !yaql "$.instance.setHieraValue('ldap::server::ssl_cacert', '')"
      #- !yaql "$.instance.setHieraValue('ldap::server::ssl_cert', '')"
      #- !yaql "$.instance.setHieraValue('ldap::server::ssl_key', '')"

  configureOpenLDAPRootUser:
    Body:
      - $resources: new(sys:Resources)
      - $template: $resources.yaml('ConfigureOpenLDAPUser.template').bind(dict(
            domain   => $this.domain,
            rootUser => $this.ldapRootUser,
            rootPass => $this.ldapRootPass,
            user     => '',
            password => '',
            email    => $this.ldapRootEmail
          ))
      - $.instance.agent.call($template, $resources)

  configureOpenLDAPUser:
    Arguments:
      - user:
          Contract: $.string().notNull()
      - password:
          Contract: $.string().notNull()
      - email:
          Contract: $.string().notNull()
    Body:
      - $resources: new(sys:Resources)
      - $template: $resources.yaml('ConfigureOpenLDAPUser.template').bind(dict(
            domain   => $this.domain,
            rootUser => $this.ldapRootUser,
            rootPass => $this.ldapRootPass,
            user     => $user,
            password => $password,
            email    => $email
          ))
      - $.instance.agent.call($template, $resources)

  destroy:
    Body:
      - $.reportDestroyed()
      - $.setAttr(deployed, false)
