Namespaces:
  =: io.murano.opaas
  std: io.murano
  res: io.murano.resources
  sys: io.murano.system
  opaas: io.murano.opaas
  puppet: io.murano.opaas.puppet

Name: Gerrit

Extends: std:Application

Properties:
  instance:
    Contract: $.class(puppet:PuppetInstance).notNull()
  name:
    Contract: $.string().notNull()
  warUrl:
    Contract: $.string()
    Default: 'https://goo.gl/aK183z?/gerrit-2.11.8.war'
  ldap:
    Contract: $.class(opaas:OpenLDAP)

Methods:
  initialize:
    Body:
      - $._environment: $.find(std:Environment).require()

  deploy:
    Body:
      - $.super($.deploy())
      - If: $.getAttr(deployed, false)
        Then:
          Return:

      - $securityGroupIngress:
        - ToPort: 80
          FromPort: 80
          IpProtocol: tcp
          External: true
        - ToPort: 443
          FromPort: 443
          IpProtocol: tcp
          External: true
        - ToPort: 8081
          FromPort: 8081
          IpProtocol: tcp
          External: true
        - ToPort: 29418
          FromPort: 29418
          IpProtocol: tcp
          External: true

      - $._environment.securityGroupManager.addGroupIngress($securityGroupIngress)
      - $._environment.reporter.report($this, 'Creating VM for Gerrit "{0}"'.format($.instance.name))
      - $.instance.deploy()
      - $._environment.reporter.report($this, 'Gerrit VM "{0}" with id {1} created'.format($.instance.name, $.instance.openstackId))

      - $._environment.reporter.report($this, 'Installing puppet modules...')

      - $this.systemConfig: new(puppet:SystemConfig)
      - $this.systemConfig.installOnTheNode($this.instance)

      - If: $.ldap != null
        Then:
          - $._environment.reporter.report($this, 'Waiting while LDAP is being deployed...')
          - $.ldap.deploy()

      - $.createConfiguration()

      - $resources: new(sys:Resources)
      - $template: $resources.yaml('DeployGerrit.template')

      - $._environment.reporter.report($this, 'Deploying Gerrit...')
      - $.instance.agent.call($template, $resources)

      - $._environment.reporter.report($this, 'Gerrit is deployed.')
      - $.setAttr(deployed, true)
      - $._environment.reporter.report($this, format('Gerrit is available at http://{0}:80 or http://{1}:8081',
          $.instance.floatingIpAddress, $.instance.floatingIpAddress))

  createLdapConfiguration:
    Body:
      - $ldapInstance: $.ldap.instance
      - If: $ldapInstance.assignFloatingIp
        Then:
          - $ldapHost: $ldapInstance.floatingIpAddress
        Else:
          - $ldapHost: $ldapInstance.ipAddresses[0]

      - $.instance.setHieraValue('ldap_ip', $ldapHost)
      - $.instance.setHieraValue('ldap_domain', $.ldap.domain)
      - $.instance.setHieraValue('ldap_root_user', $.ldap.ldapRootUser)
      - $.instance.setHieraValue('ldap_root_password', $.ldap.ldapRootPass)

  createConfiguration:
    Body:
      - If: $this.ldap != null
        Then:
          - $.createLdapConfiguration()
      - $.instance.setHieraValue( 'gerrit_war_url', $this.warUrl)
      - $.instance.setHieraValue( 'gerrit_github_token', '')
      - $.instance.setHieraValue( 'github_project_username', 'mirademo')
      - $.instance.setHieraValue( 'github_project_password', 'github_project_password')
      - $.instance.setHieraValue( 'gerrit_mysql_host', 'localhost')
      - $.instance.setHieraValue( 'gerrit_email_private_key', 'gerrit_email_private_key')
      - $.instance.setHieraValue( 'gerrit_rest_token_private_key', 'gerrit_rest_token_private_key45620')
      - $.instance.setHieraValue( 'gerritbot_password', 'P@ssw0rd')
      - $.instance.setHieraValue( 'gerritbot_ssh_rsa_key_contents', 'gerritbot_ssh_rsa_key_contents')
      - $.instance.setHieraValue( 'gerritbot_ssh_rsa_pubkey_contents', 'gerritbot_ssh_rsa_pubkey_contents')
      # - $.instance.setHieraValue( 'gerrit_ssl_cert_file_contents', 'gerrit_ssl_cert_file_contents')
      # - $.instance.setHieraValue( 'gerrit_ssl_key_file_contents', 'gerrit_ssl_key_file_contents')
      # - $.instance.setHieraValue( 'gerrit_ssl_chain_file_contents', 'gerrit_ssl_chain_file_contents')
      - $.instance.setHieraValue( 'gerrit_ssh_dsa_key_contents', 'gerrit_ssh_dsa_key_contents')
      - $.instance.setHieraValue( 'gerrit_ssh_dsa_pubkey_contents', 'gerrit_ssh_dsa_pubkey_contents')
      - $.instance.setHieraValue( 'gerrit_ssh_rsa_key_contents', 'gerrit_ssh_rsa_key_contents')
      - $.instance.setHieraValue( 'gerrit_ssh_rsa_pubkey_contents', 'gerrit_ssh_rsa_pubkey_contents')
      - $.instance.setHieraValue( 'gerrit_ssh_project_rsa_key_contents', 'gerrit_ssh_project_rsa_key_contents')
      - $.instance.setHieraValue( 'gerrit_ssh_project_rsa_pubkey_contents', 'gerrit_project_ssh_rsa_pubkey_contents')
      - $.instance.setHieraValue( 'welcome_message_gerrit_ssh_private_key', 'welcome_message_gerrit_ssh_private_key')
      - $.instance.setHieraValue( 'welcome_message_gerrit_ssh_public_key', 'welcome_message_gerrit_ssh_public_key')
      - $.instance.setHieraValue( 'ssh_replication_rsa_key_contents', '')
      - $.instance.setHieraValue( 'gerrit_replication_ssh_rsa_pubkey_contents', '')
      - $.instance.setHieraValue( 'gerrit_lp_consumer_key', 'gerrit_lp_consumer_key')
      - $.instance.setHieraValue( 'gerrit_lp_access_token', 'gerrit_lp_access_token')
      - $.instance.setHieraValue( 'gerrit_lp_access_secret', 'gerrit_lp_access_secret')
      - $.instance.setHieraValue( 'gerrit_notify_impact_file', '/etc/project-config/gerrit/notify_impact.yaml')
      - $.instance.setHieraValue( 'gerrit_contactstore_appsec', 'gerrit_contactstore_appsec')
      - $.instance.setHieraValue( 'gerrit_contactstore_pubkey', 'gerrit_contactstore_pubkey')
      - $.instance.setHieraValue( 'gerrit_acls_dir', '/etc/project-config/gerrit/acls')
      - $.instance.setHieraValue( 'gerrit_db_user', 'gerrit2')
      - $.instance.setHieraValue( 'gerrit_db_password', '12345')
      - $.instance.setHieraValue( 'gerrit_db_root_password', 'P@ssw0rd')

      - $.instance.setHieraValue( 'swift_store_user', 'swift_store_user')
      - $.instance.setHieraValue( 'swift_store_key', 'swift_store_key')
      - $.instance.setHieraValue( 'jeepyb_project_file', '/etc/project-config/gerrit/projects.yaml')
      - $.instance.setHieraValue( 'project_config_config_dir', '/etc/project-config/')

  #NOTE: this method doesn't work without ldap
  createAccount:
    Arguments:
      - group:
          Contract: $.string().notNull()
      - fullName:
          Contract: $.string().notNull()
      - email:
          Contract: $.string().notNull()
      - sshKey:
          Contract: $.string().notNull()
      - name:
          Contract: $.string().notNull()
    Body:
      - $resources: new(sys:Resources)
      - $template: $resources.yaml('CreateAccount.template').bind(dict(
          gerritUser => $.ldap.ldapRootUser,
          group      => $group,
          fullName   => $fullName,
          email      => $email,
          sshKey     => $sshKey,
          name       => $name))
      - $.instance.agent.call($template, $resources)

  destroy:
    Body:
      - $.reportDestroyed()
      - $.setAttr(deployed, false)
