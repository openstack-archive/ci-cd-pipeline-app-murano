Namespaces:
  =: org.openstack.ci_cd_pipeline_murano_app
  std: io.murano
  res: io.murano.resources
  sys: io.murano.system
  ci_cd_pipeline_murano_app: org.openstack.ci_cd_pipeline_murano_app
  puppet: org.openstack.ci_cd_pipeline_murano_app.puppet
  utils: org.openstack.ci_cd_pipeline_murano_app.utils
  conf: io.murano.configuration

Name: Zuul

Extends: utils:CombinableApplication

Properties:
  gerrit:
    Contract: $.class(Gerrit)
Methods:
  deployApplication:
    Body:
      - $.super($.deployApplication())
      - $._environment.reporter.report($this, 'Creating security group for Zuul')
      - $securityGroupIngress:
          - ToPort: 80
            FromPort: 80
            IpProtocol: tcp
            External: true
          - ToPort: 443
            FromPort: 443
            IpProtocol: tcp
            External: true
          - ToPort: 4730
            FromPort: 4730
            IpProtocol: tcp
            External: true
      - $._environment.securityGroupManager.addGroupIngress($securityGroupIngress)

      - $._environment.stack.push()

      - $this.systemConfig: new(puppet:SystemConfig)
      - $this.systemConfig.installOnTheNode($this.instance)

      - $.gerrit.deploy()

      - $.createConfiguration()

      - $resources: new(sys:Resources)
      - $template: $resources.yaml('DeployZuul.template')
      - $._environment.reporter.report($this, 'Zuul is deploying')
      - $.instance.agent.call($template, $resources)

      - $._environment.reporter.report($this, 'Creating Zuul user in Gerrit')
      - $zuul_pubkey: $.instance.getHieraValue('zuul_ssh_pubkey_contents')
      - $.gerrit.createAccount('Non-Interactive Users', 'Zuul', 'zuul@lists.openstack.org', $zuul_pubkey, 'zuul')

      - $linux: new(conf:Linux)
      - $linux.runCommand($.instance.agent, 'service zuul start')

      - If: $.instance.assignFloatingIp
        Then:
          - $host: $.instance.floatingIpAddress
        Else:
          - $host: $.instance.ipAddresses[0]
      - $._environment.reporter.report($this, 'Zuul is available at http://{0}:80'.format($host))

  createConfiguration:
    Body:
      - $gerritInstance: $.gerrit.instance
      - If: $gerritInstance.assignFloatingIp
        Then:
          - $gerritHost: $gerritInstance.floatingIpAddress
        Else:
          - $gerritHost: $gerritInstance.ipAddresses[0]

      - $.instance.setHieraValue('gerrit_server', $gerritHost)
      - $.instance.setHieraValue('gerrit_user', 'zuul')
      - $.instance.setHieraValue('gerrit_ssh_host_key', $.gerrit.instance.getHieraValue('gerrit_ssh_rsa_pubkey_contents'))
