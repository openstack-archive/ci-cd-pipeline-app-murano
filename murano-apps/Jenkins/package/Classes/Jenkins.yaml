Namespaces:
  =: io.murano.opaas
  std: io.murano
  res: io.murano.resources
  sys: io.murano.system
  opaas: io.murano.opaas
  puppet: io.murano.opaas.puppet

Name: Jenkins

Extends: std:Application

Properties:
  name:
    Contract: $.string().notNull()
  ldap:
    Contract: $.class(OpenLDAP)
  instance:
    Contract: $.class(puppet:PuppetInstance).notNull()
  cfplugin:
    Contract: $.bool()
    Default: false

Methods:
  initialize:
    Body:
      - $._environment: $.find(std:Environment).require()

  deploy:
    Body:
      - $.super($.deploy())
      - If: not $.getAttr(deployed, false)
        Then:
          - $._environment.reporter.report($this, 'Creating security group for Jenkins')
          - $securityGroupIngress:
              - ToPort: 8080
                FromPort: 8080
                IpProtocol: tcp
                External: true
          - $._environment.securityGroupManager.addGroupIngress($securityGroupIngress)

          - $._environment.reporter.report($this, 'Creating VM for Jenkins {0}'.format($.instance.openstackId))
          - $.instance.deploy()
          - $._environment.reporter.report($this, 'Jenkins VM {0} created'.format($.instance.openstackId))

          - $this.systemСonfig: new(puppet:SystemСonfig)
          - $this.systemСonfig.installOnTheNode($this.instance)

          - $resources: new(sys:Resources)
          - $template: $resources.yaml('DeployJenkins.template')
          - $._environment.reporter.report($this, 'Jenkins deploying')
          - $.instance.agent.call($template, $resources)

          - If: $.ldap != null
            Then:
              - $._environment.reporter.report($this, 'Jenkins waits OpenLDAP to be deployed...')
              - $.ldap.deploy()
              - $.connectLDAP()

          - If: $.cfplugin
            Then:
              - $._environment.reporter.report($this, 'Installing CF plugin...')
              - $template: $resources.yaml('InstallCFPlugin.template')
              - $.instance.agent.call($template, $resources)

          - $.configureZMQPlugin()

          - If: $.instance.assignFloatingIp
            Then:
              - $host: $.instance.floatingIpAddress
            Else:
              - $host: $.instance.ipAddresses[0]
          - $._environment.reporter.report($this, 'Jenkins is available at {0}:8080'.format($host))
          - $.setAttr(deployed, true)

  connectLDAP:
    Body:
      - $ldapInstance: $.ldap.instance
      - If: $ldapInstance.assignFloatingIp
        Then:
          - $ldapHost: $ldapInstance.floatingIpAddress
        Else:
          - $ldapHost: $ldapInstance.ipAddresses[0]

      - $.instance.setHieraValue('ldap_ip', $ldapHost)
      - $.instance.setHieraValue('ldap_domain', $.ldap.domain)
      - $.instance.setHieraValue('ldap_root_user', $.ldap.ldapRootUser)
      - $.instance.setHieraValue('ldap_root_password', $.ldap.ldapRootPass)

      - $resources: new(sys:Resources)
      - $._environment.reporter.report($this, 'Connecting Jenkins to OpenLDAP server')
      - $template: $resources.yaml('ConnectLDAP.template')
      - $.instance.agent.call($template, $resources)
      - $._environment.reporter.report($this, 'Jenkins is connected to OpenLDAP server!')

  configureZMQPlugin:
    Body:
      - $._environment.reporter.report($this, 'Creating security group for ZMQ Event publisher')
      - $securityGroupIngress:
          - ToPort: 8888
            FromPort: 8888
            IpProtocol: tcp
            External: true
      - $._environment.securityGroupManager.addGroupIngress($securityGroupIngress)
      - $._environment.stack.push()
      - $resources: new(sys:Resources)
      - $._environment.reporter.report($this, 'Configure Jenkins ZMQ Event Publisher plugin...')
      - $template: $resources.yaml('ConfigureZMQ.template')
      - $.instance.agent.call($template, $resources)

  configureGearmanPlugin:
    Arguments:
      - host:
          Contract: $.string().notNull()
      - port:
          Contract: $.int()
          Default: 4730
    Body:
      - $.instance.setHieraValue('gearman_host', $host)
      - $.instance.setHieraValue('gearman_port', $port)
      - $resources: new(sys:Resources)
      - $._environment.reporter.report($this, 'Configure Jenkins Gearman plugin...')
      - $template: $resources.yaml('ConfigureGearman.template')
      - $.instance.agent.call($template, $resources)

  destroy:
    Body:
      - $.reportDestroyed()
      - $.setAttr(deployed, false)
